#!/usr/bin/env ruby

module RoutingProcs
 

def enableBgp
  ret = cmd("config_routing --bgp --enable")
  sleep 5 # wait for 5 sec after enabling ospf
  return ret
end

def disableBgp
  cmd("config_routing --bgp --disable")
end

def bgpCmd(cmd, opt = {})
  m = __method__ + " : #{self.class.to_s} "
  
  opt = {:password => "bgp", :timeout => nil, :under_head => nil}.merge(opt)
  
  @handle.set_timeout(opt[:timeout]) if opt[:timeout]
  
  o = String.new
  cmd("stty rows 200") # need to change rows otherwise will get --More-- in bgp output.
  begin
    if self.class.to_s =~ /Edge/i
      $log.debug "#{m}: Enable BGP on EdgeMarc"
      @handle.puts("config_routing --bgp --enable")
      o = @handle.waitfor({ 'Match' => /#|#{PROMPT_REGEXP}/, 'Timeout' => 30})
      $log.debug "#{m}: #{__LINE__} : #{o}"
      self.clear_telnet_buffer
      @handle.puts("config_routing --bgp --connect")
    else
      @handle.puts("telnet localhost bgpd")
    end
    o = @handle.waitfor(/\#|assword:/)
    self.clear_telnet_buffer
    
    $log.debug "#{m}: #{__LINE__} : #{o}"
    if o.include?("assword")
      @handle.puts("bgp")
      o = @handle.waitfor(/\#|BGP>|bgpd>/)
    end
    
    $log.debug "#{m}: #{__LINE__} : #{o}"
    if o.match(/BGP>|bgpd>/)
      @handle.puts("enable")
      o = @handle.waitfor(/\#|BGP#|bgpd#|assword:/)
    end
    
    if o.include?("assword")
      @handle.puts("bgp")
      o = @handle.waitfor(/\#|BGP>|bgpd>/)
    end
    
    $log.debug "#{m}: #{__LINE__} : #{o}"
    if o.match(/BGP#|bgpd#/)
      o = get_cmd_bgp_output(cmd, opt[:under_head])
      $log.debug "#{m}: #{__LINE__} : #{o}"
      
      5.times{ |i|
        self.clear_telnet_buffer
        @handle.puts("quit")
        ret = @handle.waitfor(/\#|onnection closed|bgp/i)
        $log.debug "#{m}: #{__LINE__} : #{ret}"
        if ret.match(/bgp/i)
          $log.debug "retry #{i}"
          next
        end
        break
      }
      return o
    end
  rescue Exception => e
    f = $!.to_s + "\n" + $@.join("\n")
    $log.fatal f
    
    # cnt-c or cnt-z don't work for ospf
    5.times{ |i|
      @handle.puts("quit")
      ret = @handle.waitfor(/\#|\$|onnection closed|bgp/i)
      $log.debug "#{m}: #{__LINE__} : #{ret}"
      if ret.match(/bgp/i)
        $log.debug "retry #{i}"
        next
      end
      break
    }
  end
end

# Execute given command on bgp command prompt and return output
def get_cmd_bgp_output(cmd, under_head)
  m = __method__
  tc_opt = Stack::Device['tc_options']

  if under_head
    @handle.puts("configure terminal")
    o = @handle.waitfor(/BGP|bgpd\(config\)#/)
    $log.debug "#{m}: #{__LINE__} : #{o}"
    
    if under_head =~ /interface eth1/
      @handle.puts("interface eth1")
      o = @handle.waitfor(/BGP|bgpd\(config\-if\)#/)
      $log.debug "#{m}: #{__LINE__} : #{o}"
      
      @handle.puts(cmd)
      o = @handle.waitfor(/BGP|bgpd\(config\-if\)#/)
      return o
    end
    
    if under_head =~ /router bgp/
      @handle.puts("router bgp #{tc_opt.target_number} ")
      o = @handle.waitfor(/BGP|bgpd\(config\-router\)#/)
      $log.debug "#{m}: #{__LINE__} : #{o}"
      
      @handle.puts(cmd)
      o = @handle.waitfor(/BGP|bgpd\(config\-router\)#/)
      return o
    end
  else
    @handle.puts(cmd)
    return @handle.waitfor(/BGP#|bgpd#/)
  end
end


end

